{"version":3,"sources":["components/DropdownMenu.jsx","constants/BackColor.js","constants/FontColor.js","constants/FontSize.js","components/TextEditor.jsx","App.js","reportWebVitals.js","index.js"],"names":["DropdownMenu","lstData","onchange","defaultValue","onChange","e","value","target","handleOnchange","map","element","backColor","fontColor","fontsize","TextEditor","myContainer","createRef","useEffect","current","contentEditable","changeToBoldStyle","a","document","execCommand","changeToItalicStyle","changeBackColor","color","changeColor","resizeText","size","className","onClick","src","alt","ref","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oNAkCeA,EA9BM,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aAKzC,OACE,mCACE,sBACEC,SAAU,SAACC,IAPM,SAACA,GACtB,IAAMC,EAAQD,EAAEE,OAAOD,MACvBJ,EAASI,GAMHE,CAAeH,IAFnB,SAKE,wBAAQF,aAAcA,EAAtB,gBACGF,QADH,IACGA,OADH,EACGA,EAASQ,KAAI,SAACC,GACb,OACE,wBAAsBJ,MAAOI,EAA7B,SACGA,GADUA,aClBZC,EADC,CAAC,QAAQ,SAAS,MAAM,OAAO,QAAQ,SAAS,SCCjDC,EADC,CAAC,QAAQ,SAAS,MAAM,OAAO,QAAQ,SAAS,SCCjDC,EADA,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KCgGzBC,EA1FI,WACjB,IAAMC,EAAcC,sBACpBC,qBAAU,WACRF,EAAYG,QAAQC,gBAAkB,UAExC,IAAMC,EAAiB,uCAAG,sBAAAC,EAAA,sDACxBC,SAASC,YAAY,QAAQ,EAAO,MADZ,2CAAH,qDAGjBC,EAAmB,uCAAG,sBAAAH,EAAA,sDAC1BC,SAASC,YAAY,UAAU,EAAO,MADZ,2CAAH,qDAGnBE,EAAe,uCAAG,WAAOC,GAAP,SAAAL,EAAA,sDACtBC,SAASC,YAAY,aAAa,EAAOG,GADnB,2CAAH,sDAGfC,EAAW,uCAAG,WAAOD,GAAP,SAAAL,EAAA,sDAClBC,SAASC,YAAY,aAAa,EAAOG,GADvB,2CAAH,sDAGXE,EAAU,uCAAG,WAAOC,GAAP,SAAAR,EAAA,sDACjBC,SAASC,YAAY,YAAY,EAAOM,GADvB,2CAAH,sDA2BhB,OACE,sBAAKC,UAAW,YAAhB,UACE,qBAAKA,UAAW,YAAhB,SACE,+BACE,oBACEC,QAAS,WACPX,KAFJ,SAKE,qBAAKY,IAAI,mBAAmBC,IAAI,WAElC,oBACEF,QAAS,WACPP,KAFJ,SAKE,qBAAKQ,IAAI,qBAAqBC,IAAI,aAEpC,6BACE,cAAC,EAAD,CACEhC,QAASY,EACTX,SAAU0B,EACVzB,aAAc,QAGlB,6BACE,cAAC,EAAD,CACEF,QAASW,EACTV,SAAUyB,EACVxB,aAAc,YAGlB,6BACE,cAAC,EAAD,CACEF,QAASU,EACTT,SAAUuB,EACVtB,aAAc,YAGlB,sDAGJ,qBAAK+B,IAAKnB,EAAaoB,GAAG,oBCjFjBC,EAPH,WACV,OACA,8BACE,cAAC,EAAD,OCKWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1B,SAAS2B,eAAe,SAM1BZ,K","file":"static/js/main.2c341a74.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst DropdownMenu = ({ lstData, onchange, defaultValue }) => {\r\n  const handleOnchange = (e) => {\r\n    const value = e.target.value;\r\n    onchange(value);\r\n  };\r\n  return (\r\n    <>\r\n      <form\r\n        onChange={(e) => {\r\n          handleOnchange(e);\r\n        }}\r\n      >\r\n        <select defaultValue={defaultValue}>\r\n          {lstData?.map((element) => {\r\n            return (\r\n              <option key={element} value={element}>\r\n                {element}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\nDropdownMenu.propTypes = {\r\n  lstData: PropTypes.array,\r\n  onchange: PropTypes.func,\r\n  defaultValue: PropTypes.string,\r\n};\r\nexport default DropdownMenu;\r\n","const backColor=['black','yellow','red','blue','brown','orange','white'];\r\nexport default backColor;","const fontColor=['black','yellow','red','blue','brown','orange','white'];\r\nexport default fontColor;","const fontsize=['1','2','3','4','5','6','7'];\r\nexport default fontsize;","import React, { useEffect, createRef } from \"react\";\r\nimport \"../App.css\";\r\nimport DropdownMenu from \"./DropdownMenu\";\r\nimport backColor from \"../constants/BackColor\";\r\nimport fontColor from \"../constants/FontColor\";\r\nimport fontsize from \"../constants/FontSize\";\r\nconst TextEditor = () => {\r\n  const myContainer = createRef();\r\n  useEffect(() => {\r\n    myContainer.current.contentEditable = \"true\";\r\n  });\r\n  const changeToBoldStyle = async () => {\r\n    document.execCommand(\"bold\", false, null);\r\n  };\r\n  const changeToItalicStyle = async () => {\r\n    document.execCommand(\"italic\", false, null);\r\n  };\r\n  const changeBackColor = async (color) => {\r\n    document.execCommand(\"backColor\", false, color);\r\n  };\r\n  const changeColor = async (color) => {\r\n    document.execCommand(\"foreColor\", false, color);\r\n  };\r\n  const resizeText = async (size) => {\r\n    document.execCommand(\"fontSize\", false, size);\r\n  };\r\n  /* const convertToJson = () => {\r\n    const Json = document.getElementById(\"editorSpace\");\r\n    const elements = Json.children;\r\n    const nodes = [];\r\n    if (elements.length == 0) {\r\n      nodes.push({ text: Json.innerHTML, size: \"default\", color: \"default\" });\r\n    } else {\r\n      console.log(elements[1]);\r\n      let el = {};\r\n      if (elements[0].tagName == \"FONT\") {\r\n        el.size = elements[0].getAttribute(\"size\");\r\n      }\r\n      if (elements[0].tagName == \"div\") {\r\n        el.color = elements[0].getAttribute(\"style\").split(\": \");\r\n        console.log(el);\r\n      }\r\n      const b = elements[0].getElementsByTagName(\"b\");\r\n      const font = elements[1].getElementsByTagName(\"font\");\r\n      const i = elements[0].getElementsByTagName(\"i\");\r\n      const div = elements[0].getElementsByTagName(\"div\");\r\n      console.log(b, font, i, div);\r\n    }\r\n    console.log(nodes);\r\n  };*/\r\n  return (\r\n    <div className={\"container\"}>\r\n      <div className={\"tools-bar\"}>\r\n        <ul>\r\n          <li\r\n            onClick={() => {\r\n              changeToBoldStyle();\r\n            }}\r\n          >\r\n            <img src=\"/images/Bold.png\" alt=\"bold\"></img>\r\n          </li>\r\n          <li\r\n            onClick={() => {\r\n              changeToItalicStyle();\r\n            }}\r\n          >\r\n            <img src=\"/images/Italic.png\" alt=\"Italic\"></img>\r\n          </li>\r\n          <li>\r\n            <DropdownMenu\r\n              lstData={fontsize}\r\n              onchange={resizeText}\r\n              defaultValue={\"3\"}\r\n            ></DropdownMenu>\r\n          </li>\r\n          <li>\r\n            <DropdownMenu\r\n              lstData={fontColor}\r\n              onchange={changeColor}\r\n              defaultValue={\"black\"}\r\n            ></DropdownMenu>\r\n          </li>\r\n          <li>\r\n            <DropdownMenu\r\n              lstData={backColor}\r\n              onchange={changeBackColor}\r\n              defaultValue={\"white\"}\r\n            ></DropdownMenu>\r\n          </li>\r\n          <li>Convert to Json</li>\r\n        </ul>\r\n      </div>\r\n      <div ref={myContainer} id=\"editorSpace\"></div>\r\n    </div>\r\n  );\r\n};\r\nexport default TextEditor;\r\n","import React, { useEffect, createRef } from \"react\";\nimport \"./App.css\";\nimport TextEditor from \"./components/TextEditor\";\n\nconst App = () => {\n  return(\n  <div>\n    <TextEditor></TextEditor>\n    </div>\n  );\n};\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}